{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAqBhD,OACI,sBAAMC,SAZY,SAAEC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SApBe,SAAEP,GAAQF,EAAeE,EAAEQ,OAAOF,a,+BCTpDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGCI,MAAOF,GAHR,cAGbG,EAHa,gBAKKA,EAAKC,OALV,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,EAAN,WCLES,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAKoB,EACLL,SAAS,SAItB,CAAEtB,IAIEuB,EDnB2BK,CAAc5B,GAAnCa,EAFwB,EAE7BN,KAAae,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADEA,EAAIC,aEoBxBkB,EAhCM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,WAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KASvB,OACI,qCACI,kDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCpBlC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5688fde3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    // (e) es el evento\r\n    //para recuperar el valor ingresado por el usuario en el input\r\n    const handleInputChange =  ( e ) => {setinputValue( e.target.value );\r\n    }\r\n\r\n    // manejar el ener\r\n    const handleSubmit =  ( e ) => {\r\n        e.preventDefault();\r\n       \r\n        if( inputValue.trim().length > 2 ){ // validacion mayor a 2 caracteres\r\n\r\n            setCategories( cats => [ inputValue, ...cats ]); // si ponemos inputValue primero la ultima busqueda aparece al principio\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange= { handleInputChange } // ser carga el valor recuperado en el onchange\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ponRnFjJ9XR8RVL6DRZV7mzJKBRnBREU`;\r\n\r\n    const resp =  await fetch( url );\r\n\r\n    const { data }  = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    \r\n    //console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    \r\n    console.log( id, title, url  );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={ url } alt={ title } />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading } =  useFetchGifs( category ); // helper para conectarme a la api\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\"> Loading </p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { \r\n        getGifs(category )\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data:imgs,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n    }, [ category ]); \r\n\r\n\r\n\r\n    return state;\r\n}","\r\nimport React, { useState } from 'react';\r\nimport  { AddCategory }   from './components/AddCategory';\r\nimport  { GifGrid }   from './components/GifGrid';\r\n//import PropTypes from 'prop-types';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon']);\r\n    \r\n    /*const handleAdd = () => {\r\n        //setCategories( [ ...categories, 'Naruto' ] );\r\n        setCategories( cats => [ ...cats, 'Naruto' ]);\r\n    }*/\r\n\r\n    return ( \r\n        <>\r\n            <h2>Buscador de Gifs</h2>\r\n\r\n            <AddCategory setCategories={ setCategories } />   \r\n\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />   \r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </> \r\n    ); \r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}